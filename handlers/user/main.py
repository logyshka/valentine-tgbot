import re
from loader import dp
from aiogram.types import Message, CallbackQuery
import states.send_message as states
import keyboards.main as keyboard

from aiogram.dispatcher import FSMContext

send_to = {}

@dp.message_handler(lambda message: message.text == "/start")
async def SEND_VALENTINE(message: Message):
    await message.answer(text="<i>üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è</i>\n\n"
                              "<i>üëæ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:</i>\n\n"
                              f"<b>https://t.me/{(await dp.bot.get_me()).username}?start={message.from_user.id}</b>\n\n"
                              f"<i>üëæ –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –Ω–µ–π –∫–∞–∂–¥—ã–π —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É!</i>",
                         disable_web_page_preview=True)

@dp.message_handler(regexp="/start \d+")
async def SEND_VALENTINE(message: Message):
    user_id = int(re.findall(r"/start (\d+)", message.text)[0])
    try:
        await dp.bot.get_chat(user_id)
        if message.from_user.id != user_id:
            await states.SendMessage.nickname.set()
            send_to[message.from_user.id] = user_id
            await message.answer(text="<i>‚úí –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º</i>\n\n"
                                      "<b>‚ö† –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —Ç–æ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>",
                                 reply_markup=keyboard.skip_nickname)
        else:
            await message.answer(text=f"<i>‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ!</i>")

    except:
        bot = (await dp.bot.get_me()).username
        await message.answer(text=f"<i>‚ö† –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ @{bot}!</i>")
    finally:
        await message.delete()

@dp.message_handler(state=states.SendMessage.nickname)
async def GET_NICKNAME(message: Message, state: FSMContext):
    if message.text != "‚ñ∂ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        async with state.proxy() as data:
            data["nickname"] = message.text
    await states.SendMessage.next()
    await message.answer(text=f"<i>‚úí –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{(await dp.bot.get_chat(send_to[message.from_user.id])).username}</i>")

@dp.message_handler(state=states.SendMessage.message)
async def GET_MESSAGE(message: Message, state: FSMContext):
    if len(message.text) < 2000:
        async with state.proxy() as data:
            nickname = data.get("nickname")
            data["message"] = message.text
            if nickname:
                text = "<i>ü§® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:</i>\n\n" + message.text + "\n\n" + \
                        f"ü•∑üèº –í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º: {nickname}"
            else:
                text = "<i>ü§® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:</i>\n\n" + message.text
            await message.answer(text, reply_markup=keyboard.accept(send_to.get(message.from_user.id)))
    else:
        await message.answer(text=f"<i>‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—å –¥–ª–∏–Ω–æ–π –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!</i>")

@dp.callback_query_handler(lambda call: "send_message_" in call.data, state=states.SendMessage.message)
async def SEND_MESSAGE(call: CallbackQuery, state: FSMContext):
    user_id = int(call.data.replace("send_message_", ""))
    await call.message.answer(f"<i>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{(await dp.bot.get_chat(user_id)).username}</i>", reply_markup=keyboard.send_again(user_id))
    async with state.proxy() as data:
        nickname = data.get("nickname")
        message = data.get("message")
    if nickname:
        text = f"""
<i>‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º <u>{nickname}</u>!</i>\n
<i>‚óæ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</i>\n
<b>{message}</b>
        """
    else:
        text = f"""
<i>‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</i>\n
<i>‚óæ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</i>\n
<b>{message}</b>
                """
    await dp.bot.send_message(chat_id=user_id, text=text)
    await state.finish()
    await call.message.delete()

@dp.callback_query_handler(lambda call: "rewrite_message_" in call.data)
async def SEND_MESSAGE(call: CallbackQuery):
    user_id = int(call.data.replace("rewrite_message_", ""))
    await states.SendMessage.nickname.set()
    send_to[call.from_user.id] = user_id
    await call.message.answer(text="<i>‚úí –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º</i>\n\n"
                                   "<b>‚ö† –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —Ç–æ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>",
                              reply_markup=keyboard.skip_nickname)
    await call.message.delete()