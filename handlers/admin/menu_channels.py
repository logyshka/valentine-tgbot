from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from filters import IsAdmin, IsMember, CallEqual, CallStart
from loader import dp, admin_id, logger
import keyboards.inline.admin as kb
from utils.entities.channel import Channel, ChannelLimitError, ChannelExistsError, BotAdminError
import states.admin as st


@dp.callback_query_handler(CallEqual("menu_channels"), IsAdmin())
async def menu_channels(call: CallbackQuery):
    await call.message.edit_text(f"<b>üÜî –í–∞—à id: {call.from_user.id}</b>\n\n"
                                 f"<b>‚óæ –í—ã –∞–¥–º–∏–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>\n\n"
                                 f"<b>‚óæ –õ–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ<code> 5 </code></b>")
    await call.message.edit_reply_markup(kb.menu_channels([[i[0], "locked"] for i in Channel.channels()]))


@dp.callback_query_handler(CallEqual("add_channel"), IsAdmin())
async def add_channel(call: CallbackQuery):
    await call.answer("‚óæ –í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å", show_alert=True)
    await st.Channel.add.set()


@dp.message_handler(IsAdmin(), state=st.Channel.add)
async def add_channel(message: Message, state: FSMContext):
    try:
        channel_id = int(message.text)
        await Channel.add(channel_id=channel_id, bot=dp.bot)
        await message.answer(f"<b>‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                             f"<b>üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞<code>{(await dp.bot.get_chat(channel_id)).full_name}</code></b>")
        logger.success(f"{message.from_user.id}: channel {channel_id} has been added")
    except ChannelExistsError:
        await message.answer("<b>‚ö† –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> –∫–∞–Ω–∞–ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö</code>")
    except ChannelLimitError:
        await message.answer("<b>‚ö† –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ 5/5</code>")
    except BotAdminError:
        await message.answer("<b>‚ö† –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞</code>")
    except Exception:
        await message.answer("<b>‚ö† –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                             "<i>ü§∑‚Äç‚ôÇ –ü—Ä–∏—á–∏–Ω–∞:</i><code> –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–∞–Ω–∞–ª–∞</code>")
    finally:
        await state.finish()
        await message.delete()


@dp.callback_query_handler(CallEqual("refresh_channel"), IsAdmin())
async def refresh_channel(call: CallbackQuery):
    try:
        await call.message.edit_reply_markup(kb.menu_channels([[i[0], "locked"] for i in Channel.channels()]))
    except Exception:
        await call.answer("‚ö† –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!")


@dp.callback_query_handler(CallStart("unlock_delete_channel_"), IsAdmin())
async def unlock_delete_channel(call: CallbackQuery):
    channels = []
    for i in Channel.channels():
        if i[0] == int(call.data.replace("unlock_delete_channel_", "")):
            channels.append([i[0], "unlocked"])
        else:
            channels.append([i[0], "locked"])
    await call.message.edit_reply_markup(kb.menu_channels(channels))


@dp.callback_query_handler(CallEqual("channel_locked"), IsAdmin())
async def channel_locked(call: CallbackQuery):
    await call.answer("–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ!")


@dp.callback_query_handler(CallStart("delete_channel_"), IsAdmin())
async def delete_channel(call: CallbackQuery):
    channel_id = int(call.data.replace("delete_channel_", ""))
    Channel.delete(channel_id)
    await call.message.edit_reply_markup(kb.menu_channels([[i, "locked"] for i in Channel.channels()]))
    logger.success(f"{call.from_user.id}: channel {channel_id} has been deleted")


@dp.message_handler(IsMember())
async def is_not_member(message: Message):
    await message.answer("<b>‚ö† –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ</b>\n\n"
                         "<b>‚å® –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏</b>",
                         reply_markup=kb.subscribe_channels(Channel.channels()))


@dp.callback_query_handler(IsMember())
async def is_not_member(call: CallbackQuery):
    if call.data == "accept_subscription":
        await call.answer("‚ö† –ù–µ –ø—ã—Ç–∞–π—Å—è –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å!")
    else:
        await call.message.answer("<b>‚ö† –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ</b>\n\n"
                                  "<b>‚å® –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏</b>",
                                  reply_markup=kb.subscribe_channels(Channel.channels()))


@dp.callback_query_handler(CallEqual("accept_subscription"))
async def accept_subscription(call: CallbackQuery):
    await call.message.answer("<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
                              "<b>‚å® –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start</b>")
    await call.message.delete()
