from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from utils.entities.user import User
from filters import CallEqual, AcceptAgreement, IsAdmin
from loader import dp, admin_id, logger, agreement
import keyboards.inline.admin as kb
import states.admin as st


@dp.callback_query_handler(CallEqual("menu_agreement"), IsAdmin())
async def menu_agreement(call: CallbackQuery):
    await call.message.edit_text(f"<b>üÜî –í–∞—à id: <code>{call.from_user.id}</code></b>\n\n"
                                 "<b>‚óæ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –µ–≥–æ!</b>",
                                 reply_markup=kb.menu_agreement())


@dp.callback_query_handler(CallEqual("turn_off_agreement"), IsAdmin())
async def turn_off_agreement(call: CallbackQuery):
    agreement.turn_off()
    await call.message.edit_reply_markup(kb.menu_agreement())


@dp.callback_query_handler(CallEqual("turn_on_agreement"), IsAdmin())
async def turn_on_agreement(call: CallbackQuery):
    agreement.turn_on()
    try:
        await call.message.edit_reply_markup(kb.menu_agreement())
    except:
        await call.answer("‚ö† –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")


@dp.callback_query_handler(CallEqual("edit_agreement"), IsAdmin())
async def edit_agreement(call: CallbackQuery):
    await call.message.answer(
        "<b>‚óæ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è<code> html-—Ç–µ–≥–∏</code></b>",
        reply_markup=kb.close())
    await st.Agreement.edit.set()


@dp.message_handler(IsAdmin(), state=st.Agreement.edit)
async def start_agreement(message: Message, state: FSMContext):
    agreement.edit_message(message)
    await message.reply("<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>")
    await state.finish()


@dp.callback_query_handler(CallEqual("show_agreement"), IsAdmin())
async def show_agreement(call: CallbackQuery):
    if bool(agreement):
        await call.message.answer(text=agreement.message)
    else:
        await call.answer("‚ö† –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")


@dp.message_handler(AcceptAgreement())
async def start_agreement(message: Message):
    await message.answer(text=agreement.message,
                         reply_markup=kb.accept_agreement())


@dp.callback_query_handler(CallEqual("accept_agreement"), AcceptAgreement())
async def menu_agreement(call: CallbackQuery):
    User(call.from_user.id).accept_agreement()
    await call.message.answer("<b>‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ!\n\n</b>"
                              "<b>‚óæ –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!</b>")
    await call.message.delete()
    call.message.to_python()


@dp.message_handler(commands=["rule", "rules", "agreement"])
async def rules(message: Message):
    if bool(agreement):
        await message.reply(agreement.message)
    else:
        await message.delete()
